{"version":3,"sources":["components/SummaryInfo.js","components/SummaryInfoMain.js","components/LoadWeather.js","App.js","serviceWorker.js","index.js"],"names":["SummaryInfo","data","changeIcon","checkIndex","convert","moonPhase2","Array","className","time","icon","summary","temperatureHigh","temperatureLow","uvIndex","ozone","pressure","dewPoint","Math","round","humidity","windSpeed","visibility","cloudCover","sunriseTime","sunsetTime","moonPhase","SummaryInfoMain","zona","vreme","temperature","timezone","latitude","longitude","LoadWeather","useState","setZona","setVreme","daily","setDaily","useEffect","navigator","geolocation","getCurrentPosition","position","long","JSON","stringify","coords","lat","url_link","fetch","then","response","json","currently","value","uv_index","date","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","console","log","map","key","random","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c88d995a.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\n\r\nconst SummaryInfo = ({data, changeIcon, checkIndex, convert, moonPhase2}) => {\r\n\r\n  var results = new Array();\r\n  results = convert();\r\n\r\n  return (\r\n            <div className=\"next_days\">\r\n              <div className=\"content\">\r\n                  <div className=\"next_days_info\">\r\n                    <h2>Day: <span>{convert(data.time)[2]}</span></h2>\r\n                    <div className=\"ikona2\">{changeIcon(data.icon)}</div>\r\n                    <p>Summary: <br/><span>{data.summary}</span></p>\r\n                  </div>\r\n                  <div className=\"next_days_info\">\r\n                    <p>Temperature: <span>{data.temperatureHigh+` ${'\\u00b0'}C / `+data.temperatureLow+` ${'\\u00b0'}C`}</span></p>\r\n                    <p>UV Index: <span>{data.uvIndex}</span>{checkIndex(data.uvIndex)}</p>\r\n                    <p>Ozone: <span>{data.ozone+\" DU\"}</span></p>\r\n                    <p>Air Pressure: <span>{data.pressure+\" hPa\"}</span></p>\r\n                    <p>Dew Point: <span>{data.dewPoint+` ${'\\u00b0'}C`}</span></p>\r\n                    <p>Humidity: <span>{Math.round(data.humidity*100) +\" %\"}</span></p>\r\n                    <p>Wind Speed: <span>{data.windSpeed+\" m/s\"}</span></p>\r\n                    <p>Visibility: <span>{data.visibility +\" km\"}</span></p>\r\n                    <p>Cloud Cover: <span>{Math.round(data.cloudCover*100)+\" %\"}</span></p>\r\n                    <p>Sunrise Time: <span>{convert(data.sunriseTime)[1]}</span></p>\r\n                    <p>Sunset Time: <span>{convert(data.sunsetTime)[1]}</span></p>\r\n                    <p>Moon Phase: <span>{data.moonPhase} {moonPhase2(data.moonPhase)}</span></p>\r\n                  </div>\r\n                  <div className=\"ikona2\">{moonPhase2(data.moonPhase)}</div>\r\n              </div>\r\n            </div>\r\n  );\r\n}\r\n\r\nexport default SummaryInfo;","import React from 'react';\r\nimport '../App.css';\r\n\r\nconst SummaryInfoMain = ({zona, vreme, checkIndex, convert, changeIcon}) => {\r\n\r\n  return (\r\n      <div className=\"summary_main\">\r\n            <div className=\"title\">\r\n                <div className=\"ikona\">{changeIcon(vreme.icon)}</div>\r\n                <h4>{vreme.summary} / <span>{vreme.temperature+` ${'\\u00b0'}C`}</span></h4>\r\n            </div>\r\n            <div className=\"sub_title\">\r\n            <h2>{zona.timezone}</h2>\r\n                <p>latitude: <span>{zona.latitude}</span></p>\r\n                <p>longitude: <span>{zona.longitude}</span></p>\r\n            </div>\r\n            <div className=\"h_line\"><div className=\"h_line1\"></div><div className=\"h_line2\"></div></div>\r\n            <div className=\"info\">\r\n                <p>Temperature: <span>{vreme.temperature+` ${'\\u00b0'}C`}</span></p>\r\n                <p>Air Pressure: <span>{vreme.pressure+\" hPa\"}</span></p>\r\n                <p>UV Index: <span>{vreme.uvIndex +`${checkIndex(vreme.uvIndex)}`}</span></p>\r\n                <p>Humidity: <span>{Math.round(vreme.humidity*100) +\" %\"}</span></p>\r\n                <p>Cloud Cover: <span>{Math.round(vreme.cloudCover*100) +\" %\"}</span></p>\r\n                <p>Wind Speed: <span>{vreme.windSpeed +\" m/s\"}</span></p>\r\n                <p>Visibility: <span>{vreme.visibility +\" km\"}</span></p>\r\n            </div>\r\n            <div className=\"dark_sky\">\r\n                <p className=\"server\">Last update from Dark Sky:</p>\r\n                <p>Date/Time: <span>{convert(vreme.time)[0]}</span></p>\r\n            </div>\r\n            <div className=\"line\"><div className=\"line1\"></div><div className=\"line2\"></div></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SummaryInfoMain;","import React, {useEffect, useState} from 'react';\r\nimport SummaryInfo from './SummaryInfo';\r\nimport SummaryInfoMain from './SummaryInfoMain';\r\nimport '../components/weather-icons-master/css/weather-icons.min.css';\r\n\r\n\r\nexport function LoadWeather() {\r\n\r\n    const [zona, setZona] = useState([]);\r\n    const [vreme, setVreme] = useState([]);\r\n    const [daily, setDaily] = useState([]);\r\n\r\n    useEffect(() => { \r\n        navigator.geolocation.getCurrentPosition(\r\n\r\n            (position) => {\r\n                const long = JSON.stringify(position.coords.longitude);\r\n                const lat = JSON.stringify(position.coords.latitude);\r\n    \r\n                const proxy = `https://cors-anywhere.herokuapp.com/`;\r\n                const url_link = `${proxy}https://api.darksky.net/forecast/d34f6a77ce6c6e1523ecd97e0a38958b/${lat},${long}?units=si`;\r\n\r\n                fetch(url_link).then(response => {\r\n                    return response.json();\r\n                }).then(data => {\r\n                \r\n                    setZona(data);\r\n                    setVreme(data.currently);\r\n                    setDaily(data.daily.data);\r\n\r\n                })\r\n            }\r\n         );\r\n\r\n    }, []);\r\n    \r\n   \r\n    const changeIcon = (icon) => {\r\n        if (icon === \"clear-day\") return <i className=\"wi wi-day-sunny\"></i>;\r\n        if (icon === \"clear-night\") return <i className=\"wi wi-night-clear\"></i>;\r\n        if (icon === \"rain\") return <i className=\"wi wi-day-rain\"></i>;\r\n        if (icon === \"snow\") return <i className=\"wi wi-day-snow-wind\"></i>;\r\n        if (icon === \"sleet\") return <i className=\"wi wi-day-sleet\"></i>;\r\n        if (icon === \"wind\") return <i className=\"wi wi-day-windy\"></i>;\r\n        if (icon === \"fog\") return <i className=\"wi wi-fog\"></i>;\r\n        if (icon === \"cloudy\") return <i className=\"wi wi-cloudy\"></i>;\r\n        if (icon === \"partly-cloudy-day\") return <i className=\"wi wi-day-cloudy\"></i>;\r\n        if (icon === \"partly-cloudy-night\") return <i className=\"wi wi-night-alt-cloudy\"></i>;\r\n    }\r\n\r\n    const moonPhase2 = (value) => {\r\n        if ((value >= 0 && value < 0.125) || value === 1.0) return <i className=\"wi wi-moon-alt-new\"></i>;\r\n        if (value >= 0.125 && value < 0.25) return <i className=\"wi wi-moon-alt-waxing-crescent-3\"></i>;\r\n        if (value >= 0.25 && value < 0.375) return <i className=\"wi wi-moon-alt-first-quarter\"></i>;\r\n        if (value >= 0.375 && value < 0.5) return <i className=\"wi wi-moon-alt-waxing-gibbous-3\"></i>;\r\n        if (value >= 0.5  && value < 0.625) return <i className=\"wi wi-moon-alt-full\"></i>;\r\n        if (value >= 0.625 && value < 0.75) return <i className=\"wi wi-moon-alt-waning-gibbous-3\"></i>;\r\n        if (value >= 0.75  && value < 0.875) return <i className=\"wi wi-moon-alt-third-quarter\"></i>;\r\n        if (value >= 0.875  && value < 1) return <i className=\"wi wi-moon-alt-waning-crescent-3\"></i>;\r\n    }\r\n\r\n    const checkIndex = (uv_index) => {\r\n        if (uv_index <= 1 || uv_index <=2 ) return \" Low\";\r\n        if (uv_index <= 3 || uv_index <= 4) return \" Moderate\";\r\n        if (uv_index <= 5 || uv_index <= 6) return \" High\";\r\n        if (uv_index <= 7 || uv_index <= 9) return \" Very High\";\r\n        if (uv_index >= 10 ) return \" Extreme\";\r\n    }\r\n\r\n    function convert(time){\r\n\r\n        // Unixtimestamp\r\n        var unixtimestamp = time;\r\n       \r\n        // Months array\r\n        var months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n       \r\n        // Convert timestamp to milliseconds\r\n        var date = new Date(unixtimestamp*1000);\r\n       \r\n        // Year\r\n        var year = date.getFullYear();\r\n       \r\n        // Month\r\n        var month = months_arr[date.getMonth()];\r\n       \r\n        // Day\r\n        var day = date.getDate();\r\n       \r\n        // Hours\r\n        var hours = date.getHours();\r\n       \r\n        // Minutes\r\n        var minutes = \"0\" + date.getMinutes();\r\n       \r\n        // Seconds\r\n        var seconds = \"0\" + date.getSeconds();\r\n       \r\n        // Display date time in MM-dd-yyyy h:m:s format\r\n        var convdataTime = month+'/'+day+'/'+year+' '+hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n        var convdataTime2 = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n        var convdataTime3 = day+'. '+month+' '+year;\r\n\r\n        return [convdataTime, convdataTime2, convdataTime3];\r\n        \r\n    }\r\n\r\n    console.log(daily);\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"header\">\r\n                    <h1>weather app</h1>\r\n                    <div className=\"line\"><div className=\"line1\"></div><div className=\"line2\"></div></div>\r\n                </div>\r\n                    <SummaryInfoMain \r\n                    zona={zona}\r\n                    vreme={vreme}\r\n                    checkIndex={checkIndex}\r\n                    convert={convert}\r\n                    changeIcon={changeIcon}\r\n                    />\r\n\r\n                <div className=\"other_days\">\r\n                {\r\n                    daily.map(data => (\r\n                    <SummaryInfo \r\n                    key={Math.random()}\r\n                    data={data}\r\n                    changeIcon={changeIcon}\r\n                    checkIndex={checkIndex}\r\n                    convert={convert}\r\n                    moonPhase2={moonPhase2}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default LoadWeather;\r\n","import React from 'react';\nimport LoadWeather from './components/LoadWeather';\nimport './App.css';\n\n\n\nfunction App() {\n\n  \n\n  return (\n    <div className=\"container\">\n      <LoadWeather />\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}